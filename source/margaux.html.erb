---
site:
  title: Projet BAO
  categorie: Margaux Duhayon
  description: Projet de traitement automatique des langues, utilisant Perl et XSLT

author:
  all: Milena Chaîne, Margaux Duhayon, Ferial Yahiaoui
  milena: Milena Chaîne
  margaux: Margaux Duhayon
  ferial: Ferial Yahiaoui
  school: Inalco

master:
  site: "http://www.tal.univ-paris3.fr/plurital/"


layout: margaux

---

<% content_for :logo do %>
<%= image_tag "test3.jpg" %>
<% end %>

<%= partial "partials/onglet_bao_margaux" %>

<p>INTRODUCTION</p>

<%= image_tag 'schema/bao_schema.png' %>

<h3 id="bao1">BAO 1 </h3>
<p> La Boîte à outil n°1 permet de parcourir les rubriques des chacunes des archives du <em>Monde</em> afin de récupérer les titres et les descriptions de chaque article et les mettre dans 2 fichiers :
un fichier texte et un fichier xml. <br/>Les données récupérées sont également nettoyer dans cette boîte à outil. <br/>Nous observerons les résultats dans la boîte à outil n°2 qui possède seulement un sous-programme d'étiquetage supplémentaire. </p>

<label>

<%= partial "partials/code", :locals => { :code_file => "assets/margaux/BAO1_margaux.pl"} %>
<% code("perl") do %>
#/usr/bin/perl
<<DOC;
BAO 1 Margaux Duhayon
Commande : perl BAO1.pl repertoire-a-parcourir rubrique


#------------------------ BAO1 ----------------------------------

#--------- Définition des variables et entête du fichier xml-------------------------------

my $rep="$ARGV[0]";
my $rubrique="$ARGV[1]";
my %dico= ();

$rep=~ s/[\/]$//; # le nom du répertoire ne doit pas se termine pas par un "/"

open my $sortie_txt,">:encoding(utf8)", "$rubrique.txt"; #sortie qui sera un fichier txt
open my $sortie_xml,">:encoding(utf8)", "$rubrique.xml"; # sortie qui sera un fichier xml
print $sortie_xml "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"; #entête du futur fichier xml
print $sortie_xml "<PARCOURS>\n";
print $sortie_xml "<NOM>Duhayon Margaux</NOM>\n";
print $sortie_xml "<ABSTRACT>\n";


&parcoursarborescencefichiers($rep);	# on lance la récursion

print $sortie_xml "</ABSTRACT>\n";
print $sortie_xml "</PARCOURS>\n";

close $sortie_txt;
close $sortie_xml;

exit;

#----------------Ouverture des fichier ------------------------------

sub parcoursarborescencefichiers {
    my $path = shift(@_);
    opendir(DIR, $path) or die "can't open $path: $!\n";
    my @files = readdir(DIR);
    closedir(DIR);
    foreach my $file (@files) {
		next if $file =~ /^\.\.?$/;
		$file = $path."/".$file;
		if (-d $file) {
			print "<NOUVEAU REPERTOIRE> ==> ",$file,"\n";
			&parcoursarborescencefichiers($file);	#recurse!
			print "<FIN REPERTOIRE> ==> ",$file,"\n";
		}

#---------------- Si c'est un fichier xml : récuperer le texte ------------------------------

		if (-f $file) {
            if($file =~ m/$rubrique.+\.xml$/) {

                print "<",$i++,"> ==> ",$file,"\n";

                open my $FILEIN, "<:encoding(utf-8)", $file;

                my $ensemble="";
                while (my $ligne=<$FILEIN>) {
                    chomp $ligne;
                    $ligne =~ s/\r//g;
                    $ensemble = $ensemble . $ligne ;
                }

#----------------Chercher les balises titre et description ------------------------------

                while ($ensemble =~ m/<item>.*?<title>(.+?)<\/title>.*?<description>(.+?)<\/description>.*?<\/item>/g){
                    my $title = $1;
                    my $description = $2;
                    if (!exists $dico{$title})
                        {
                        $dico{$title} = 1;
                        my ($titre_propre, $description_propre) = &nettoyage($title, $description);

#---------------- Impression du contenu dans des balises ------------------------------

                        print $sortie_txt "$titre_propre.\n";
                        print $sortie_txt "$description_propre\n\n";

                        print $sortie_xml "<item><titre>$titre_propre</titre><description>$description_propre</description></item>\n";

          }
        }
      }
		}
  }
}

#------------ Sous-programme de nettoyage -------------------

sub nettoyage {
    my $var1 = shift(@_); # @_: liste des arguemnts d'une procédure
    my $var2 = shift(@_);
    my $var3 = shift(@_);
    my $var4 = shift(@_);
    my $var5 = shift(@_);
    my $var6 = shift(@_);
    my $var7 = shift(@_);

    $var1 =~s/&lt;.+?&gt;//g;
    $var2 =~s/&lt;.+?&gt;//g;
    $var3 =~ s/&#38;#39;/'/g;
    $var4 =~ s/&#039;/'/g;
    $var5 =~ s/\t+//g;
    $var6 =~ s/> +</></g;
    $var7 =~ s/<[^>]+?>//g;
    return $var1,$var2,$var3,$var4,$var5,$var6,$var7;
}
<% end %>
</label>

<h3 id="bao2">BAO 2 </h3>
<p> La Boîte à outil n°2 effectue la même action que la Boîte à outil n°1 mais possède une étape supplémentaire qui est l'étiquetage des titres et descriptions.
</p>

<label>

<%= partial "partials/code", :locals => { :code_file => "assets/margaux/BAO2_margaux.pl"} %>
<% code("perl") do %>
#/usr/bin/perl


my $rep="$ARGV[0]"; #recupere le nom du r�pertoire
my $rubrique="$ARGV[1]"; #filtrer

$rep =~ s/[\/]$//; #sino =~ s/[\/]$//;

my %dico=();
my $codage = "utf-8";
my $compteurfile=1;
my $compteurItem=0;

my $output1=$rubrique.".xml";
my $output2=$rubrique.".txt";

if (!open (FILEOUT,">:encoding($codage)",$output1)) { die "Problème à l'ouverture du fichier $output1"};
if (!open (FILEOUT2,">:encoding($codage)",$output2)) { die "Problème à l'ouverture du fichier $output2"};

print FILEOUT "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n";
print FILEOUT "<PARCOURS>\n";
print FILEOUT "<NOM>Margaux Duhayon</NOM>\n";
print FILEOUT "<FILTRAGE>\n";



#----------------------------------------
&parcoursarborescencefichiers($rep);	# on lance la recursion.... et elle se terminera apres examen de toute l'arborescence
#----------------------------------------

if (!open (FILEOUT,">>:encoding($codage)",$output1)) { die "Problème à l'ouverture du fichier $output1"};
print FILEOUT "\n</FILTRAGE>\n";
print FILEOUT "</PARCOURS>\n";
close(FILEOUT);
exit;
#----------------------------------------------
sub parcoursarborescencefichiers {

    # open (XML, ">>:encoding(utf8), "lemonde.xml);

    my $path = shift(@_); #r�cup�re nom du rep
    opendir(DIR, $path) or die "can't open $path: $!\n"; # fonction qui permet d'ouvrir d'un r�pertiore � la mani�re de l'ouverture d'un fichier
    my @files = readdir(DIR); #lire rep , renvoir une liste
    closedir(DIR);
    foreach my $file (@files) {
		next if $file =~ /^\.\.?$/;
		$file = $path."/".$file;
		if (-d $file) { #vrai si objet est un rep
			print "<NOUVEAU REPERTOIRE> ==> ",$file,"\n";
			&parcoursarborescencefichiers($file);	#recurse!
			print "<FIN REPERTOIRE> ==> ",$file,"\n";
		}
		if (-f $file) { #faux si objet est rep

			if ($file =~/$rubrique.+\.xml$/){
            print "<",$compteurfile++,"> ==> ",$file,"\n";

            open(FIC, "<:encoding($codage)", $file);  #Ouverture du fichier passé en argument au script et association à un pointeur de fichier
            #open (FILEOUT1, ">>:encoding(utf-8)", "sortie_$rubrique.txt"); #> écrasement alors il faut mettre >>
            #open (FILEOUT2, ">>:encoding(utf-8)", "sortie_$rubrique.xml");
            my $ensemble="";
            while (my $ligne=<FIC>) { #sert à lire les lignes du fichier; on la déclare localement dans la boucle
                chomp $ligne;
                $ligne=~ s/\r//g;
        	      $ensemble = $ensemble . $ligne;

        }
                close FIC;

                $ensemble =~ s/>\s+</></g;

                #while ($ensemble =~ m/<item>.*?<title>(.+?)<\/title>.+?<description>(.+?)<\/description>.*?<\/item>/g) { #? s'arrête au premier </title, g pour global pour qu'il fasse tout le texte. ELVIRA: moi j´ai <item> *.+?...(un espace entre > et l´étoile).
                #m/<item>.*?<title>(.+?)<\/title>.*?<description>([^<]*?)<\/description>.*?<\/item>/g
                while ($ensemble =~ m/<item>.*?<title>(.+?)<\/title>.*?<description>(.+?)<\/description>.*?<\/item>/g) {

              		my $titre = $1;
              		my $description = $2;

                  my ($titre, $description) = &nettoyage ($titre, $description); #& veut dire éxecute

                  if (!(exists $dico{$title}))
                  {

                    $dico{$titre} = 1; #eviter les doublon, en donnant une clé au titre. Si il rencontre la même clé il prend rien



                    $compteurItem++;
                    my ($titre_etiq, $desc_etiq) = &etiquetage ($titre, $description);

                    print FILEOUT "<item number=\"$compteurItem\">\n<titre>$titre_etiq</titre>\n<description>$desc_etiq</description>\n</item>\n";
                    print FILEOUT2 "$titre\n$description\n\n";
                  }
              }

			      }
        }
    }
}

sub nettoyage {

	#my $var1 = $_[O]; #création de tableau
	  my $var1 = shift(@_); #shift récupère 1 ère valeur du tableau
    my $var2 = shift(@_);


    $var1=~s/&lt;.+?&gt;//g; # nettoyage � compl�ter...
    $var2=~s/&lt;.+?&gt;//g; # nettoyage � compl�ter...
    $var1.=".";
    $var1=~s/\?\.$/\?/;
    return $var1,$var2;
}

sub etiquetage
{
  my $var1 = shift(@_);
  my $var2 = shift(@_);
  open (OUT, ">:encoding(utf8)", "titre_tempo.txt");
  print OUT $var1;
  close OUT;
  system ("perl tokenise-utf8.pl titre_tempo.txt | ./treetagger/bin/tree-tagger -lemma -token -no-unknown ./treetagger/lib/french-utf8.par > titre_etiq_tempo.txt");
  system ("perl treetagger2xml-utf8.pl titre_etiq_tempo.txt utf8");
  $/=undef;
  open (FIC,"<:encoding(utf8)","titre_etiq_tempo.txt.xml");
  my $titre_retour=<FIC>;
  $titre_retour =~s/<\?xml version="1\.0" encoding="utf-8" standalone="no"\?>\r\n//;
  print $titre_retour;

  open (OUT, ">:encoding(utf8)", "desc_tempo.txt");
  print OUT $var2;
  close OUT;
  system ("perl tokenise-utf8.pl desc_tempo.txt | ./treetagger/bin/tree-tagger -lemma -token -no-unknown ./treetagger/lib/french-utf8.par > desc_etiq_tempo.txt");
  system ("perl treetagger2xml-utf8.pl desc_etiq_tempo.txt utf8");
  $/=undef;
  open (FIC,"<:encoding(utf8)", "desc_etiq_tempo.txt.xml");
  my $desc_retour=<FIC>;
  $desc_retour =~s/<\?xml version="1\.0" encoding="utf-8" standalone="no"\?>\n//;

  $/="\n";

  return $titre_retour, $desc_retour;
  #exit;
}



<% end %>
</label>

<h3 id="bao3">BAO 3 </h3>

<p>La Boîte à outil n°3 permet d'extraire des patrons morphosyntaxiques dans les étiquetages produits avec Cordial. </p>
<p> Plusieurs possibilités seront présentées :
<br/><br/> 1) une solution perl qui prend en argument le fichier texte des patrons
<br/> 2) une solution avec l'aide de recommandation XSLT
<br/> 3) une solution avec l'aide de recommandation XQUERY

</p>

<h4> 1 ère solution :</h4>
<p>Pour cette solution, il faut dans un premier temps, passer les fichiers étiquetés obtenus dans la BAO 2 dans le logiciel <em>Cordial</em>.
<br/> Le programme va parcourir le fichier ligne par ligne et va mettre dans 3 listes différentes le contenu de chacune des colonnes du fichier Cordial.
<br/>On a également besoin d'un fichier texte avec les patrons morphosyntaxiques comme ci-dessous.</p>
<p> Pour passer les fichiers dans <em>Cordial</em>, il faut modiffier l'encodage de nos fichier en <em>ISO-8859-1</em>. <br/>Pour cela, nous utilisons la commande <b>iconv -f UTF-8 -t iso-8859-1 3236.txt > fichier.txt</b>.

<br/>
<br/>

<%= image_tag "patron.jpg" %>


<p><br/> La commande est donc : <b>perl BAO3.pl fichier_cordial fichier_txt_patrons</b>.</p>




<label>

<%= partial "partials/code", :locals => { :code_file => "assets/margaux/BAO3_1_margaux.pl"} %>
<% code("perl") do %>
#!/usr/bin/perl
# Extraction des patrons morphosyntaxiques dans les étiquetages produits avec Cordial
# Données : fichier d'entrée passé dans le logiciel cordial.
#  commande : perl BAO3 new_3208.cnr


use utf8;
binmode STDOUT, ":utf8";

#---------LECTURE DU FICHIER -------------------------------

open (FICHIER, "<:encoding(utf8)", $ARGV[0]);
my $chaine="";

# Boucle principale
while (my $ligne=<FICHIER>)
{

    $ligne=~s/\r//g;
    chomp $ligne;

#---------Récupération du POS et du TOKEN -------------------------------

    if (($ligne=~/^([^\t]+)\t[^\t]+\t([^\t]+)$/) and ($ligne!~/PONCT_FORT/))
    {


        my $f=$1;
        my $c=$2;
        $f=~s/ /%/g;


        $chaine = $chaine . $c ."_".$f." ";
    }

    else
    {
        open (TERM, "<:encoding(utf8)", $ARGV[1]);
        while ($terme=<TERM>)
        {
            chomp($terme);
            $terme=~s/([^ ]+)/$1_\[\^ \]+/g;

        while ($chaine=~/($terme)/g)
        {

            my $correspondance=$1;
            $correspondance=~s/[A-Z]+_//g;
            $correspondance=~s/%/ /g;
            print $correspondance,"\n";

        }


        }
        close(TERM);
        $chaine="";
    }

}

close FICHIER;
"



<% end %>
</label>

<h4> 2e solution :</h4>

<p> La deuxième solution était un exercice effectué dans une autre matière qui se nomme <em>Document Structuré</em>.
<br/> Cette solution est effectuée avec le langage XML et des recommandations XSLT et XPATH.</p>

<p> Nous avons trois feuilles de style xslt :</p>
<p> La première permet d'extraire le patron morphosyntaxique <b>NOM ADJ</b></p>

<label>
<%= partial "partials/code", :locals => { :code_file => "assets/margaux/exo12/exo12-Q2-1_margaux.xsl"} %>

<% code("xml") do %>
<?xml version="1.0" encoding="iso-8859-1"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="utf-8"/>

<xsl:template match="/">
    <html>
        <body  bgcolor="#81808E">
            <table align="center" width="50%"  bgcolor="white" bordercolor="#3300FF" border="1">
                <tr bgcolor="black">
                    <td width="90%" valign="top"><font color="white"><h1>Extraction de patron <font color="red"><b>NOM</b></font><xsl:text> </xsl:text><font color="blue"><b>ADJ</b></font></h1></font></td>
                </tr>
                <tr><td>
                    <blockquote><xsl:apply-templates select="./parcours/item/title/article"/></blockquote></td></tr>
            </table>
        </body>
    </html>
<xsl:apply-templates select="//element"/>
</xsl:template>

<xsl:template match="element">
<xsl:choose>
<xsl:when test="(./data[contains(text(),'NOM')]) and (following-sibling::element[1][./data[contains(text(),'ADJ')]])">
    <font color="red"><xsl:value-of select="./data[3]"/></font><xsl:text> </xsl:text>
</xsl:when>
<xsl:when test="(./data[contains(text(),'ADJ')]) and (preceding-sibling::element[1][./data[contains(text(),'NOM')]])">
    <font color="blue"><xsl:value-of select="./data[3]"/></font>
    <br/>
</xsl:when>
</xsl:choose>
</xsl:template>

</xsl:stylesheet>

<% end %>
</label>

<h4><a href="assets/exo12/exo12-Q2-1_margaux.html"> Résultat </a></h4>

<br/>
<p> La deuxième permet d'extraire le patron morphosyntaxique <b>NUM NOM VER PUN</b></p>

  <label>

  <%= partial "partials/code", :locals => { :code_file => "assets/margaux/exo12/exo12-Q2-2_margaux.xsl"} %>
  <% code("xml") do %>
  <?xml version="1.0" encoding="utf-8"?>
  <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
      <xsl:output method="html" encoding="utf-8"/>
      <xsl:template match="/">
          <html>
              <body  bgcolor="#81808E">
                  <table align="center" width="50%"  bgcolor="white" bordercolor="#3300FF" border="1">
                      <tr bgcolor="black">
                          <td width="90%" valign="top"><font color="white"><h1>Extraction de patron <font color="red"><b>NUM</b></font><xsl:text> </xsl:text><font color="blue"><b>NOM</b></font><xsl:text> </xsl:text><font color="green"><b>VER</b></font><xsl:text> </xsl:text><font color="white"><b>PUN</b></font></h1></font></td>
                      </tr>
                      <tr><td>
                          <blockquote><xsl:apply-templates select="./parcours/item/title/article"/></blockquote></td></tr>
                  </table>
              </body>
          </html>
          <xsl:apply-templates select=".//article"/>
      </xsl:template>


      <xsl:template match="article">
          <xsl:for-each select="element">
              <xsl:if test="(./data[1][contains(text(),'NUM')])">
                  <xsl:variable name="p1" select="./data[3]/text()"/>
                  <xsl:if test="following-sibling::element[1][./data[1][contains(text(),'NOM')]]">
                  <xsl:variable name="p2" select="following-sibling::element[1]/data[3]/text()"/>
                  <xsl:if test="following-sibling::element[2][./data[1][contains(text(),'VER')]]">
                  <xsl:variable name="p3" select="following-sibling::element[2]/data[3]/text()"/>
                  <xsl:if test="following-sibling::element[3][./data[1][contains(text(), 'PUN')]]">
                  <xsl:variable name="p4" select="following-sibling::element[3]/data[3]/text()"/>
                    <font color="red"><xsl:value-of select="$p1"/></font>
                    <xsl:text> </xsl:text>
                    <font color="blue"><xsl:value-of select="$p2"/></font>
                    <xsl:text> </xsl:text>
                    <font color="green"><xsl:value-of select="$p3"/></font>
                    <xsl:text> </xsl:text>
                    <font color="white"><xsl:value-of select="$p4"/></font>
                      <br/>

                      </xsl:if>
                  </xsl:if>
              </xsl:if>
            </xsl:if>
          </xsl:for-each>

      </xsl:template>

  </xsl:stylesheet>


  <% end %>
  </label>

<h4><a href="assets/exo12/exo12-Q2-2_margaux.html"> Résultat </a></h4>

<br/>
<p> La troisième permet d'extraire le patron morphosyntaxique <b>NOM VER ADJ</b></p>

<label>
<%= partial "partials/code", :locals => { :code_file => "assets/exo12/exo12-Q2-3_margaux.xsl"} %>
<% code("xml") do %>
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="html" encoding="utf-8"/>
    <xsl:template match="/">
        <html>
            <body  bgcolor="#81808E">
                <table align="center" width="50%"  bgcolor="white" bordercolor="#3300FF" border="1">
                    <tr bgcolor="black">
                        <td width="90%" valign="top"><font color="white"><h1>Extraction de patron <font color="red"><b>NOM</b></font><xsl:text> </xsl:text><font color="blue"><b>VER</b></font><xsl:text> </xsl:text><font color="green"><b>ADJ</b></font></h1></font></td>
                    </tr>
                    <tr><td>
                        <blockquote><xsl:apply-templates select="./parcours/item/title/article"/></blockquote></td></tr>
                </table>
            </body>
        </html>
        <xsl:apply-templates select=".//article"/>
    </xsl:template>


    <xsl:template match="article">
        <xsl:for-each select="element">
            <xsl:if test="(./data[1][contains(text(),'NOM')])">
                <xsl:variable name="p1" select="./data[3]/text()"/>
                <xsl:if test="following-sibling::element[1][./data[1][contains(text(),'VER')]]">
                    <xsl:variable name="p2" select="following-sibling::element[1]/data[3]/text()"/>
                    <xsl:if test="following-sibling::element[2][./data[1][contains(text(),'ADJ')]]">
                        <xsl:variable name="p3" select="following-sibling::element[2]/data[3]/text()"/>
                         <font color="red"><xsl:value-of select="$p1"/></font>
                            <xsl:text> </xsl:text>
                            <font color="blue"><xsl:value-of select="$p2"/></font>
                            <xsl:text> </xsl:text>
                            <font color="green"><xsl:value-of select="$p3"/></font>

                            <br/>

                    </xsl:if>
                </xsl:if>
            </xsl:if>
        </xsl:for-each>

    </xsl:template>

</xsl:stylesheet>


  <% end %>
  </label>

<h4><a href="assets/exo12/exo12-Q2-3_margaux.html"> Résultat </a></h4>

<h4> 3e solution :</h4>
<p> Cette troisième solution propose des recommandations <b>XQUERY</b> pour extraire les patrons morphosyntaxiques "NOM ADJ" et "NOM PRP NOM".</p>
<
<p> Ci-dessous la recommandation pour le patron morphosyntaxique "NOM ADJ"</p>
<label>

  <%= partial "partials/code", :locals => { :code_file => "assets/margaux/exo12/exo12-Q7_margaux.xq"} %>

  <% code("xml") do %>
for $rss in doc("3244")//article
for $element in $rss/element
let $next := $element/following-sibling::element[1]
where $element/data[1] = "NOM" and $next/data[1] = "ADJ"
return <PATRON-NOM-ADJ>{$element,$next}</PATRON-NOM-ADJ>

  <% end %>
  </label>

<h4><a href="assets/exo12/exo12-Q7_margaux.txt"> Résultat </a></h4>

<p> Ci-dessous la recommandation pour le patron morphosyntaxique "NOM PRP NOM"</p>
<label>

  <%= partial "partials/code", :locals => { :code_file => "assets/margaux/exo12/exo12-Q8_margaux.xq"} %>

  <% code("xml") do %>
for $rss in doc("3244")//article
for $element in $rss/element
let $next := $element/following-sibling::element[1]
let $nextN := $next/following-sibling::element[1]
where $element/data[1]="NOM" and $next/data[1]="PRP" and $nextN//data[1]="NOM"
return <PATRON-NOM-PRP-NOM>{$element,$next,$nextN}</PATRON-NOM-PRP-NOM>

  <% end %>
  </label>

<h4><a href="assets/exo12/exo12-Q8_margaux.txt"> Résultat </a></h4>

<h3>DIFFICULTÉ : se faire voler son ordinateur</h3>
  <p> Je me retrouve à cette étape du projet sans ordinateur et avec toutes mes données perdues ainsi que mes programmes.
  <br/> Mes rubriques seront donc plus les mêmes car sans ordinateur, mes collègues ont fait fonctionner leurs programmes sur les rubriques qu'elles pouvaient.
  <br/> La deuxième partie de la Boîte à outils n°3 ainsi que les Boîte à outils n°4 ne s'effectueront pas avec les mêmes rubriques.
  </p>
  <p> Les nouvelles rubriques que j'utiliseraient seront :
  <br/> - La rubrique 823353 qui est la rubrique <b> Politique</b>
  <br/> - La rubrique 3208 qui est la rubrique <b> À la Une </b>
  <br/> - La rubrique 3246 qui est la rubrique <b> Culture</b></p>

<h3> Suite BAO3 </h3>

<p> Le deuxième solution perl pour extraire des patrons morphosyntaxiques utilise les données extraites avec <em> TreeTagger</em>.
<br/>La grande différence que ce script possède par rapport au premier que l'on a pu observer plus haut
est que les données entrantes sont placées dans un tableau et sont ensuite analysées par notre programme puis extraite du tableau.
<br/> Nous possédons alors deux scripts pour cette solution : un pour chaque patron.</p>

<h4><b> PATRON NOM ADJECTIF </b></h4>

<label>

<%= partial "partials/code", :locals => { :code_file => "assets/margaux/BAO3-2-NOM_ADJ.pl"} %>

<% code("perl") do %>

open(FILE,"$ARGV[0]");

# Définition du tableau #
my @lignes=<FILE>;
close(FILE);

#Début de la boucle #
while (my $ligne=shift(@lignes)) {

    chomp $ligne;
    my $sequence="";
    my $longueur=0;

    # Recherche des NOMS #
    if ( $ligne =~ /<element><data type=\"type\">NOM<\/data><data type=\"lemma\">[^<]+<\/data><data type=\"string\">([^<]+)<\/data><\/element>/) {
		my $forme=$1;
		$sequence.=$forme;
		$longueur=1;
		my $nextligne=$lignes[1];

    # Recherche des ADJECTIFS #
  		if ( $nextligne =~ /<element><data type=\"type\">ADJ<\/data><data type=\"lemma\">[^<]+<\/data><data type=\"string\">([^<]+)<\/data><\/element>/) {
  			my $forme=$1;
  			$sequence.=" ".$forme;
  			$longueur=2;
  		}
    }
    if ($longueur == 2) {
	    print $sequence,"\n";
    }
}

<% end %>
</label>

<h4> Résultats </h4>
<h4><a href="assets/margaux/result_perl_patron/a-la-une-nomadj.txt"> Rubrique À la Une </a></h4>
<h4><a href="assets/margaux/result_perl_patron/pol-nomadj.txt"> Rubrique Politique </a></h4>
<h4><a href="assets/margaux/result_perl_patron/culture-nomadj.txt"> Rubrique Culture </a></h4>

<h4><b> PATRON NOM PRÉPOSITION NOM </b></h4>

<label>

<%= partial "partials/code", :locals => { :code_file => "assets/margaux/BAO2-2-NOM_PREP_NOM.pl"} %>

<% code("perl") do %>

open(FILE,"$ARGV[0]");

my @lignes=<FILE>;
close(FILE);
while (my $ligne=shift(@lignes)) {
    chomp $ligne;
    my $sequence="";
    my $longueur=0;

# RECHERCHE DU NOM #
    if ( $ligne =~ /<element><data type=\"type\">NOM<\/data><data type=\"lemma\">[^<]+<\/data><data type=\"string\">([^<]+)<\/data><\/element>/) {
		my $forme=$1;
		$sequence.=$forme;
		$longueur=1;

# RECHERCHE DU PRP #
		my $nextligne=$lignes[1];
  		if ( $nextligne =~ /<element><data type=\"type\">PRP<\/data><data type=\"lemma\">[^<]+<\/data><data type=\"string\">([^<]+)<\/data><\/element>/) {
  			my $forme=$1;
  			$sequence.=" ".$forme;
  			$longueur=2;


# RECHERCHE DU NOM #
  			my $nextligne1=$lignes[3];
  			if ( $nextligne1 =~ /<element><data type=\"type\">NOM<\/data><data type=\"lemma\">[^<]+<\/data><data type=\"string\">([^<]+)<\/data><\/element>/) {
  				my $forme=$1;
  				$sequence.=" ".$forme;
  				$longueur=3;
  			}
  		}
    }
    if ($longueur == 3) {


    print $sequence,"\n";

    }
}

<% end %>
</label>

<h4> Résultats </h4>
<h4><a href="assets/margaux/result_perl_treetagger/a-la-une-npn.txt"> Rubrique À la Une </a></h4>
<h4><a href="assets/margaux/result_perl_treetagger/pol-npn.txt"> Rubrique Politique </a></h4>
<h4><a href="assets/margaux/result_perl_treetagger/culture-npn.txt"> Rubrique Culture </a></h4>

<p> J'ai effectué d'autres patrons pour chaque rubrique qui reprennent soit l'une ou l'autre des deux solutions utilisant les programmes <b>Perl</b>.
 Voici leurs résultats.</p>

 <h4> Rubrique À la Une</h4>
 <p><em><b> Solution Perl Cordial </b></em></p>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_adj-nc.txt">  Patron ADJ NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_NC_NP.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_NC_PREP_NP.txt">  Patron NC PREP NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_NCDETDNP">  Patron NC DETD NP </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_ncnc.txt">  Patron NC NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_NCNP.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_NC-V.txt">  Patron NC V  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/CORDIAL_npn.txt">  Patron NC PREP NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/cordial-nc-adj.txt">  Patron NC ADJ </a></h4>


 <p><em><b> Solution Perl TreeTagger </b></em></p>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_ADJ-NOM.txt">  Patron ADJ NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_NAM-VER.txt">  Patron NAM VER  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_NOM-ADJ.txt">  Patron NOM ADJ  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_NOM-DET_ART-NAM.txt">  Patron NOM DET NAM  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_NOM-NAM.txt">  Patron NOM NAM  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3208/TREETAGGER_NOM-NOM.txt">  Patron NOM NOM  </a></h4>

 <h4> Rubrique Culture </h4>
 <p><em><b> Solution Perl Cordial </b></em></p>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-adj-nc.txt">  Patron ADJ NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-nc-adj.txt">  Patron NC ADJ  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-nc-detd-np.txt">  Patron NC DETD NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-nc-nc.txt">  Patron NC NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-nc-np.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-np-v.txt">  Patron NP V  </a></h4>

 <p><em><b> Solution Perl TreeTagger </b></em></p>
  <h4><a href="assets/margaux/result_perl_patron/3246/tree-adj-nom.txt">  Patron ADJ NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/tree-nom-adj.txt">  Patron NC ADJ  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/tree-nom-detart-nam.txt">  Patron NC DETD NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/tree-nomnam.txt">  Patron NC NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/tree-nom-nom.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/3246/cordial-nam-v.txt">  Patron NP V  </a></h4>


 <h4> Rubrique Politique </h4>
  <p><em><b> Solution Perl Cordial </b></em></p>
<h4><a href="assets/margaux/result_perl_patron/823353/cordial-adj-nc.txt">  Patron ADJ NC  </a></h4>
<h4><a href="assets/margaux/result_perl_patron/823353/cordial-nc-adj.txt">  Patron NC ADJ  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/cordial-nc-detd-np.txt">  Patron NC DETD NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/cordial-nc-nc.txt">  Patron NC NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/cordial-nc-np.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/cordial-np-v.txt">  Patron NP V  </a></h4>


<p><em><b> Solution Perl TreeTagger </b></em></p>
<h4><a href="assets/margaux/result_perl_patron/823353/tree-adj-nom.txt">  Patron ADJ NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/tree-nom-adj.txt">  Patron NC ADJ  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/tree-nom-detart-nam.txt">  Patron NC DETD NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/tree-nom-nam.txt">  Patron NC NC  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/tree-nom-nom.txt">  Patron NC NP  </a></h4>
 <h4><a href="assets/margaux/result_perl_patron/823353/cordial-nam-v.txt">  Patron NP V  </a></h4>


<p> Ces différents patrons nous servirons pour la Boîte à outil n°4. Ainsi, nous pourrons observer les différences de résultats obtenus. </p>

<h3 id="bao4">BAO 4 </h3>

<p> La Boîte à outils n°4 va nous permettre de créer des graphes de cooccurrence avec l'aide d'un logiciel qui se nomme <b> patron2graph</b>.
<br/> Pour ce logiciel nous avons besoin de créer un fichier texte supplémentaire contenant le motif recherché.
<br/> La commande pour utiliser ce logiciel est : <b> chemin-logiciel "encodage" fichier-patron motif.txt</b>.</p>

<p> Les motifs que j'ai utilisé sont les mots :
 "Femme", "Homme", "droite/gauche", "scandale/affaire/cas", "Macron", "Fillon".
 <br/> Ces motifs ont été décidé avec mes collègues en observant les actualités les plus importantes de l'année 2017.
 </p>

 <h3> Le motif : Rubrique  À la Une </h3>

 <p><b><em> Le motif [Ff]emmes? </em></b></p>

 <p> Dans le patron NOM ADJ </p>

 <%= image_tag 'margaux/graphes/femme-une.png' %>

 <p> On peut observer que deux types d'adjectifs utilisés avec le nom "femme(s)".
<br/>On trouve des adjectifs concernant les origines de la femme ou un adjectif concernant sa situation ("agées", "célibataires"," enceintes").</p>

 <p> Dans le patron NOM PREP NOM </p>

 <%= image_tag 'margaux/graphes/femme-une-npn.png' %>

 <p> On peut observer que la préposition la plus utilisée avec le mot "femme(s)" est la préposition "de".
 <br/> On trouve alors des coocurences telles que "milliers/génération/dizaine de femme" </p>

 <p> Observons maintenant la différence avec le motif "[Hh]ommes?"</p>

  <p><b><em> Le motif [Hh]ommes? </em></b></p>

  <%= image_tag 'margaux/graphes/une-homme-tree.png' %>

  <p>On observe que les résultats sont plus nombreux quand le motif est "[Hh]ommes?".
  <br/> La coocurence la plus importante est <b>"affaire d'homme"</b>.
  <br/> Les adjectifs que l'on retrouve le plus sont des adjectifs concernant le physique de l'homme ("fort", "charismatique"). </p>

  <p><b><em> Le motif (scandales?)|(affaires? )|(cas)|(.*gate/b)</em></b></p>

  <p><b><em> Comparaison entre les deux sorties : Cordial et Treetagger </em></b></p>
  <%= image_tag 'margaux/graphes/une-scandale-tree.png' %>
  <p> Avec la sortie Treetagger, seul les mot finissant par "gate", n'apparaissent pas.
  <br/> Nous retrouvons une des plus grosses affaires de l'année avec le mot <b> scandale</b>.
  <br/> Les données ne sont pas très nombreuses mais reflète parfaite les grands scandales et affaires de l'année 2017.</p>

  <%= image_tag 'margaux/graphes/une-scandale-cordial.png' %>

  <p> Le mot le plus récurrent dans le motif recherché pour la sortie cordial est le mot <b> affaire </b>. On observe que l'on trouve énormément de nom de personne liée à telle ou telle affaire.
  <br/> Les données qui ont été récupérées avec Cordial sont plus importantes que les données récupérées avec Treetagger mais les coocurences trouvaient ne trouve pas les mot <b>scandale</b> et cas</b> contrairement à la sortie Treetagger. </p>


  <p><b><em> Le motif "Fillon" </em></b></p>

    <%= image_tag 'margaux/graphes/une-fillon-tree.png' %>
	<p> Les coocurences du motif <b> Fillon</b> sont surtout accès sur l'affaire Fillon qui a marqué cette année 2017 et qui est le cooccurent le plus fréquent du graphe. C'est ainsi que les coocurrents de "Fillon" sont des mots tels que "couple", "maison", "époux". </p>


  <p><b><em> Le motif "Macron" </em></b></p>

<%= image_tag 'margaux/graphes/une-macron-tree.png' %>
<p> Les coocurrents associés avec le motif <b> Macron </b> nous permet d'obtenir un graphe très complet.
<br/> En effet, on retrouve tout ce qui permet de définir Emmanuel Macron dans sa manière de présider. Ce qui font de lui le président qu'il est.
<br/> Ainsi, on obtient "monarque", "président", "gouvernement", "proeuropéen" mais aussi "couple" qui met en valeur la dimension de couple présidentiel qu'il met en avant.</p>

 <h3> Le motif : Rubrique  Culture </h3>

  <p><b><em> Le motif [Ff]emmes? </em></b></p>

   <%= image_tag 'margaux/graphes/femme-pol.png' %>

   <p> Tout d'abord, ce graphe est extrait du patron NOM ADJ.
   <br/> Dans la rubrique Politique, les cooccurents les plus récurrents sont "femmes politiques" et "femmes noires".
<br/> On observe ainsi que dans la rubrique politique, le mot "femme" est utilisé en décrivant sa couleur de peau plutôt que de sa fonction.</p>
   <%= image_tag 'margaux/graphes/femme-pol-npn.png' %>

   <p> Avec le patron morphosyntaxique NOM PREP NOM, on observe que dans le rubrique Politique, les coocurrents les plus présents sont des coocurents qui concerne le couple. Les mots "homme" et "femme" sont utilisés ensemble ainsi que les mots "couple" et "femme".
   <br/> On retrouve également, par 2 fois, la cooccurrence "femme en situation".</p>


   <p><b><em> Le motif [Hh]ommes? </em></b></p>

  <%= image_tag 'margaux/graphes/politique-homme-tree.png' %>
  <p> Contrairement au motif <b> Femme</b>, le motif <b>Homme</b> n'est pas associé au mot "femme". On trouve des cooccurents qui permettent de mettre l'homme en valeur.
<br/> On trouve alors les cooccurent "homme fort", "homme romanesque", "hommes jeunes".
<br/> Le cooccurent le plus fréquent est "homme à affaires".</p>

 <p><b><em> Le motif (scandales?)|(affaires? )|(cas)|(.*gate/b)</em></b></p>

 <%= image_tag 'margaux/graphes/pol-scandale-tree.png' %>
 <p> Comme pour la rubrique étudiée précédemment, on observe que la sortie Treetagger ne trouve que le mot "affaire" et ses cooccurents.
 <br/> Les deux affaires que l'on trouve le plus sont "affaire Grégory" et "affaire Fillon".


   <p><b><em> Le motif "Fillon" </em></b></p>

<%= image_tag 'margaux/graphes/politique-fillon-tree.png' %>
<p> On retrouve les mêmes coocurences que dans la rubrique précédente concernant les affaires Fillon.
<br/> Grâce aux cooccurences, on remarque que le fait que François Fillon est été candidat aux présidentielles 2017 n'a été que peu évoqué. Mais la cooccurence "affaire Fillon" se retrouve plus de 20 fois dans la rubrique Politique.</p>


   <p><b><em> Le motif "Macron" </em></b></p>

<%= image_tag 'margaux/graphes/politique-macron-tree.png' %>
<p> Dans la rubrique Politique, les cooccurents sont encore une fois représentatif de la présidence d'Emmanuel Macron
<br/> On retrouve des cooccurents concernant son élection ("candidats","candidat",président"), sur ses relations internationales ("Poutine", "duo", "rencontre"), mais aussi sur sa façon de présider le pays ("méthode","ministre","Philippe", "réformes", "ordonnance"). </p>



<p><b><em> Le motif "gauche/droite" </em></b></p>
<%= image_tag 'margaux/graphes/politique-gd-tree-1.png' %>
<p> Le graphe sur les motifs <b> gauche </b> et <b> droite </b> est très intéréssant à analyser.
<br/> Vous pouvez observer sur la droite, toutes les cooccurences du mot <b>droite</b>, sur la gauche toutes les cooccurences du mot <b>gauche</b> et au centre toutes les cooccurences concernant les deux motifs <b>gauche</b> et <b> droite</b>.
C'est le patron morphosyntaxique NOM VER qui a été utilisé afin d'observer les verbes les plus utilisés pour l'un ou l'autre des mots.
<br/> Pour la droite, on observe des verbes qui donnent une impression de grandes actions. La droite "hérite","construit","gagne", "consacre", "conforte".
<br/> Alors que la gauche, quand à elle, "occupe, "affirme", "revendique", "veut", "dénonce". Cela donne l'impression que la gauche utilise les mots et la droite les actions.
<br/> Les données concernant la droite sont également plus nombreuses. </p>

<%= image_tag 'margaux/graphes/politique-gd-tree-2.png' %>
<p> Dans ce deuxième graphe concernant les mots <b>droite</b> et <b> gauche</b> est effectué à partir du patron morphosyntaxique NOM ADJ.
<br/> On peut voir sur le côté gauche du graphe que une des cooccurences reflète le nombre de candidat par partis.
<br/> On peut voir deux coocurrences qui représente chacun des parties des présidentielles 2017. On observe la cooccurence "droite macroniste" d'un côté et "gauche mélenchoniste" de l'autre.
<br/> On peut également que la cooccurence "extrême droite" est présente 64 fois. Alors que la cooccurence "extrême gauche" n'est présente qu'une fois dans la rubrique Politique. </p>


  <h3> Le motif : Rubrique  Culture </h3>

  <p><b><em> Le motif [Ff]emmes? </em></b></p>

    <%= image_tag 'margaux/graphes/femme-cult.png' %>
	<p> Pour le patron morphosyntaxique NOM ADJ, on observe que le mot femme, dans la rubrique culture, est encore utilisé avec des mots tels que "douce", "coquette", "fragile",  ou encore "féline".
	<br/> Les cooccurences les plus utilisées sont "femme fantastique" et "femme douce". Alors que des cooccurences telles que " femmes artistes", "femmes expertes" ou encore "femmes d'affaires" ne sont évoqués qu'une fois.
	<br/> La rubrique Culture évoque encore la femme par rapport aux qualités qu'on lui demandes de posséder dans la société. <p>




	<%= image_tag 'margaux/graphes/femme-cult-npn.png' %>
	<p> Sur ce graphe issus du patron morphosyntaxique NOM PREP NOM, on peut voir que la cooccurence la plus fréquente est le mot "femme" avec la préposition "de".
<br/> On peut observer des éléments tels que "portrait de femme" ou "femme de ménage". D'un côté du graphe, avec la préposition "en", on peut observer que il y a une idée de lutte, de renouveau. L'année 2017 a été marqué par cet essor du mouvement féministe, ce qui explique que la deuxième préposition la plus utilisée est "en".
</p>

   <p><b><em> Le motif [Hh]ommes? </em></b></p>

  <%= image_tag 'margaux/graphes/culture-homme-tree.png' %>

  <p> Le mot "homme" possède des adjectifs qui permettre de le mettre en valeur. On trouve alors des mots tels que "intègre", "patient".
<br/>   Mais on trouve aussi des cooccurences tel que "l'homme invisible" ou "l'homme araîgnée" qui corresponde aux actualités Cinéma de l'année 2017.
<br/> La cooccurence la plus fréquente reste "homme d'affaires" que l'on retrouve 6 fois.
Cela nous montre l'importance de la fonction de l'homme dans la société actuelle.</p>

<h3 id="conclusion"> Conclusion </h3>

<p> Mon travail ce porte sur deux aspects:</p>
<p> Le premier est la volonté de montrer avec quelques motifs, la différence des données obtenues avec les deux solutions observées avec le langage <b> Perl </b>.
<br/> Nous avons pu observer que malgré le nombre de données plus importantes avec la sortie Treetagger, celui-ci tagger très différemment comparé au logiciel Cordial.
<br/> Les données ressorties avec Cordial semblaint refléter plus les actualités de l'année 2017. Cela est du à la différence du tag selon les deux logiciels.
<br/> Treetagger étant moins précis que Cordial, certaines données deviennent alors difficile à retrouver lorsque l'on recherche un motif précis. </p>

<p> Le deuxième aspect que j'ai voulu observer et un aspect sociolinguistique. L'utilisation des mots et ce que cela montre du motif choisi.

<br/><br/> Nous avons pu observer alors les différences de verbes entre les noms <b> gauche </b> et <b>droite</b> par exemple.
<br/>Cela permet d'observer comment un site d'information donne une image de tel ou tel partis lors d'elections.

<br/><br/>Avec les motifs <b> Macron</b> et <b> Fillon </b>, les graphes nous ont permis de mettre en valeur comment le choix des mots permet d'effectuer le portrait de tel ou tel personne.
<br/> Lorsqu'on observe les coocurrences, cela reflète la façon dont les personnes sont perçus.
Ainsi, le président Emmanuel Macron possède des cooccurents qui reflète toute sa présidence depuis qu'il était candidat aux élections jusqu'à son gouvernement et ses actions en tant que président.
<br/> Pour François Fillon, qui fût soupçonné d'emploi fictif alors qu'il était candidat, on a pu observer que les seuls cooccurents que l'on retrouve concerne l'affaire Fille et non son statut de candidat aux présidentielles.
Comme si il avait abandonné, ce qui ne fût pas le cas.

<br/><br/>Avec le motif concernant les mots <b> affaire</b>, <b> cas </b> et <b> scandale </b>, on peut observer le nombre de scandale et affaire qu'il y a eu pendant l'année 2017.
<br/> L'année 2017 a permis de pouvoir liberer une certaine parole. Cela sera montré dans les années suivantes.
<br/> Mais il est important de  montrer quelle affaire à permis de libérer telle ou telle parole.

<br/><br/> On peut observer également avec les mots <b>homme</b> et <b>femme</b>, que l'affaire Weinstein a permis de faire évoluer les idées.
<br/> C'est ainsi que l'on retrouve beaucoup de vocabulaire concernant la lutte.
 <br/>Mais on retrouve tout de même, des cooccurences reflétant l'idée d'une femme "douce", "faible".
<br/> Les femmes sont encore très peu représentées dans le langage journalistique lorsque l'on évoque des domaines précis tel que la Politiques</p>

<p> Je vous invite à présent à vous rendre sur la <%= link_to("conclusion générale", "analyse.html",) %> de notre projet. </p>
